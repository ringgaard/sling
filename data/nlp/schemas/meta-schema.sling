; SLING meta-schema definitions.

; Schema for named frames.
{=named :schema
  name: "Named"
  family: /schema/meta

  role: name
  role: {=description :slot
    name: "description"
    source: named
    target: string
  }
}

; Schema for language.
{=language +named :schema
  name: "Language"
  family: /schema/meta

  role: {=code :slot
    name: "code"
    description: "Language code"
    source: language
    target: string
  }
}

; Schema definition for schema.
{=schema +named :schema
  name: "Schema"
  family: /schema/meta

  role: {=simple :slot
    name: "simple"
    source: schema
    target: bool
  }
  role: {=role :slot
    name: "role"
    source: schema
    target: slot
    multi: true
  }
  role: {=value :slot
    name: "value"
    source: schema
    multi: true
  }
  role: {=binding :slot
    name: "binding"
    source: schema
    multi: true
  }
  role: {=projection :slot
    name: "projection"
    source: schema
    target: construction
    multi: true
  }
  role: {=trigger :slot
    name: "trigger"
    source: schema
    target: predicate
    multi: true
  }
  role: {=family :slot
    name: "family"
    source: schema
    target: schema_family
  }

  ; Roles generated by schema compiler.
  role: {=template :slot
    name: "template"
    source: schema
  }
  role: {=ancestors :slot
    name: "ancestors"
    source: schema
  }
  role: {=rolemap :slot
    name: "role map"
    source: schema
  }
  role: {=projections :slot
    name: "projections"
    source: schema
  }
}

; Schema definition for slot.
{=slot +named :schema
  name: "Slot"
  family: /schema/meta

  role: {=source :slot
    name: "source"
    source: slot
    target: schema
  }
  role: {=target :slot
    name: "target"
    source: slot
    target: schema
  }
  role: {=multi :slot
    name: "multi"
    source: slot
    target: bool
  }
  role: {=abstract :slot
    name: "abstract"
    source: slot
    target: bool
  }
  role: {=inverse :slot
    name: "inverse"
    source: slot
    target: slot
  }
}

; Binding operators.
{=equals :named name: "==" description: "Equality binding operator"}
{=assign :named name: ":=" description: "Assignment binding operator"}
{=hastype :named name: ":" description: "Type binding operator"}

; Self reference for paths in bindings.
{=self :named name: "Self" description: "Self"}

; Schemas for value types.
{=string :schema name: "String" simple: true family: /schema/meta}
{=number :schema name: "Number" simple: true family: /schema/meta}
{=int +number :schema name: "Integer" simple: true family: /schema/meta}
{=float +number :schema name: "Float" simple: true family: /schema/meta}
{=bool +int :schema name: "Boolean" simple: true family: /schema/meta}
{=date +string :schema name: "Date" simple: true family: /schema/meta}

; Specialized schema for mappings.
{=mapping +schema
  name: "Mapping"
  family: /schema/meta

  role: {=input_schema :slot
    name: "input schema"
    source: mapping
    target: schema
  }
  role: {=output_schema :slot
    name: "output schema"
    source: mapping
    target: schema
  }
}

; Base schema used for mappings.
{=construction :mapping
  name: "Construction"
  family: /schema/meta

  role: {=input :slot
    name: "input"
    source: construction
  }
  role: {=output :slot
    name: "output"
    source: construction
  }
}

; Schema definition for predicate.
{=predicate :schema
  name: "Predicate"
  family: /schema/meta

  role: {=lemma :slot
    name: "lemma"
    source: predicate
    target: string
  }
  role: {=pos :slot
    name: "POS"
    source: predicate
    target: part_of_speech
  }
  role: {=sense :slot
    name: "Sense"
    source: predicate
    multi: true
  }
}

; Part of speech definitions.
{=part_of_speech +named :schema
  name: "Part of speech"
  family: /schema/meta
  simple: true

  value: {=verb :part_of_speech name: "Verb"}
  value: {=noun :part_of_speech name: "Noun"}
  value: {=adjective :part_of_speech name: "Adjective"}
  value: {=adverb :part_of_speech name: "Adverb"}
}

; Knowledge source.
{=knowledge +named :schema
  name: "Knowledge"
  family: /schema/meta

  role: {=alias :slot
    name: "alias"
    description: "Entity name"
    source: profile
    target: nomen
    multi: true
  }

  role: {=media :slot
    name: "media"
    description: "Media file for entity"
    source: profile
    target: file
    multi: true
  }
}

; Entity alias.
{=nomen +named :schema
  name: "Alias"
  family: /schema/document

  role: {=sources :slot
    name: "Alias sources"
    description: "Bitmask for sources of alias"
    source: profile
    target: int
  }

  role: {=count :slot
    name: "Alias count"
    description: "Number of alias occurences"
    source: profile
    target: int
  }

  role: {=form :slot
    name: "Case form"
    description: "Most common case variant for alias"
    source: profile
    target: int
  }
}

; Media file.
{=file +named :schema
  name: "Media file"
  family: /schema/meta
}

; Schema family definition.
{=schema_family +named :schema
  name: "Schema family"
  family: /schema/meta

  role: {=member_schema :slot
    name: "member schema"
    source: schema_family
    target: schema
  }
  role: {=precompute_templates :slot
    name: "pre-compute templates"
    source: schema_family
    target: bool
  }
  role: {=precompute_projections :slot
    name: "pre-compute projections"
    source: schema_family
    target: bool
  }
  role: {=precompute_rolemaps :slot
    name: "pre-compute rolemaps"
    source: schema_family
    target: bool
  }
  role: {=precompute_ancestors :slot
    name: "pre-compute ancestors"
    source: schema_family
    target: bool
  }
}

; Schema for global catalog.
{=catalog :schema
  name: "Catalog"
  family: /schema/meta

  role: {=catalog_schema_family :slot
    name: "schema family"
    source: catalog
    target: schema_family
    multi: true
  }
}

; Meta schema family
{=/schema/meta :schema_family
  name: "Meta schemas"
  precompute_rolemaps: true
  precompute_ancestors: true

  member_schema: named
  member_schema: language
  member_schema: schema
  member_schema: string
  member_schema: number
  member_schema: int
  member_schema: float
  member_schema: bool
  member_schema: date
  member_schema: mapping
  member_schema: construction
  member_schema: predicate
  member_schema: part_of_speech
  member_schema: knowledge
  member_schema: nomen
  member_schema: file
  member_schema: schema_family
  member_schema: catalog
}
